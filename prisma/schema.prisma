// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// ? is optional
// @unique is unique cant same

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  age              Int?
  name             String
  email            String          @unique
  role             Role            @default(USER)
  writtenPosts     Post[]          @relation("WrittenPosts")
  favoritePosts    Post[]          @relation("FavoritePosts")
  userPreference   UserPreference? @relation(fields: [userPreferenceId], references: [id])
  userPreferenceId String?         @unique
  // isAdmin         Boolean          @default(false)
  // preferences     Jsons
  // unsupported Unsupported("")
  // blob Bytes
  // bigInt BigInt

  @@unique([age, name]) //age and name must be unique = cant have 2 user have same age and name
  @@index([email]) //sorting & performance
}

// one to one = user has table preferences, each user has one references in preferences table and each preferences has one user link to user table
model UserPreference {
  id           String  @id @default(uuid())
  emailUpdates Boolean
  user         User?
}

// one to many = post has one author, user has many posts
model Post {
  id            String     @id @default(uuid())
  title         String
  averageRating Float
  rating        Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  author        User       @relation("WrittenPosts", fields: [authorId], references: [id])
  authorId      String
  favoritedBy   User?      @relation("FavoritePosts", fields: [favoritedById], references: [id])
  favoritedById String?
  categories    Category[]

  // @@id([title, authorId]) //instead of id, we use title and authorId as id
}

// many to many = one post have categories, one category have many posts
model Category {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]
}

enum Role {
  USER
  ADMIN
}
